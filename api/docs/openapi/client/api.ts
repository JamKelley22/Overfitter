/* tslint:disable */
/* eslint-disable */
/**
 * Overfitter
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AccessTokenResponse
 */
export interface AccessTokenResponse {
    /**
     * 
     * @type {string}
     * @memberof AccessTokenResponse
     */
    'accessToken'?: string;
    /**
     * 
     * @type {string}
     * @memberof AccessTokenResponse
     */
    'tokenType'?: string;
    /**
     * 
     * @type {number}
     * @memberof AccessTokenResponse
     */
    'expiresIn'?: number;
    /**
     * 
     * @type {string}
     * @memberof AccessTokenResponse
     */
    'refreshToken'?: string;
    /**
     * 
     * @type {string}
     * @memberof AccessTokenResponse
     */
    'scope'?: string;
}
/**
 * 
 * @export
 * @interface Accessory
 */
export interface Accessory {
    /**
     * 
     * @type {string}
     * @memberof Accessory
     */
    'uriImage'?: string;
    /**
     * 
     * @type {string}
     * @memberof Accessory
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Accessory
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof Accessory
     */
    'timestampAddedRFC'?: string;
    /**
     * 
     * @type {string}
     * @memberof Accessory
     */
    'timestampLastModifiedRFC'?: string;
    /**
     * 
     * @type {number}
     * @memberof Accessory
     */
    'rating'?: number;
    /**
     * 
     * @type {string}
     * @memberof Accessory
     */
    'code'?: string;
    /**
     * 
     * @type {SizeUsLetter}
     * @memberof Accessory
     */
    'sizeUSLetter'?: SizeUsLetter;
    /**
     * 
     * @type {number}
     * @memberof Accessory
     */
    'sizeUSNumber'?: number;
    /**
     * 
     * @type {string}
     * @memberof Accessory
     */
    'brand'?: string;
    /**
     * 
     * @type {string}
     * @memberof Accessory
     */
    'timestampPurchasedRFC'?: string;
    /**
     * 
     * @type {ItemCondition}
     * @memberof Accessory
     */
    'itemCondition'?: ItemCondition;
    /**
     * 
     * @type {ItemStatus}
     * @memberof Accessory
     */
    'itemStatus'?: ItemStatus;
    /**
     * 
     * @type {number}
     * @memberof Accessory
     */
    'numberOfWears'?: number;
    /**
     * 
     * @type {number}
     * @memberof Accessory
     */
    'wearsBeforeDirty'?: number;
    /**
     * 
     * @type {number}
     * @memberof Accessory
     */
    'wearsLeftBeforeDirty'?: number;
    /**
     * 
     * @type {string}
     * @memberof Accessory
     */
    'primaryColor'?: string;
    /**
     * 
     * @type {string}
     * @memberof Accessory
     */
    'secondaryColor'?: string;
    /**
     * 
     * @type {string}
     * @memberof Accessory
     */
    'accentColor'?: string;
    /**
     * 
     * @type {string}
     * @memberof Accessory
     */
    'pattern'?: string;
    /**
     * 
     * @type {AccessoryType}
     * @memberof Accessory
     */
    'type'?: AccessoryType;
}
/**
 * 
 * @export
 * @interface AccessoryAllOf
 */
export interface AccessoryAllOf {
    /**
     * 
     * @type {AccessoryType}
     * @memberof AccessoryAllOf
     */
    'type'?: AccessoryType;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const AccessoryType = {
    Ring: 'RING',
    Necklace: 'NECKLACE',
    Earrings: 'EARRINGS',
    Purse: 'PURSE',
    Unknown: 'UNKNOWN'
} as const;

export type AccessoryType = typeof AccessoryType[keyof typeof AccessoryType];


/**
 * 
 * @export
 * @interface Bottom
 */
export interface Bottom {
    /**
     * 
     * @type {string}
     * @memberof Bottom
     */
    'uriImage'?: string;
    /**
     * 
     * @type {string}
     * @memberof Bottom
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Bottom
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof Bottom
     */
    'timestampAddedRFC'?: string;
    /**
     * 
     * @type {string}
     * @memberof Bottom
     */
    'timestampLastModifiedRFC'?: string;
    /**
     * 
     * @type {number}
     * @memberof Bottom
     */
    'rating'?: number;
    /**
     * 
     * @type {string}
     * @memberof Bottom
     */
    'code'?: string;
    /**
     * 
     * @type {SizeUsLetter}
     * @memberof Bottom
     */
    'sizeUSLetter'?: SizeUsLetter;
    /**
     * 
     * @type {number}
     * @memberof Bottom
     */
    'sizeUSNumber'?: number;
    /**
     * 
     * @type {string}
     * @memberof Bottom
     */
    'brand'?: string;
    /**
     * 
     * @type {string}
     * @memberof Bottom
     */
    'timestampPurchasedRFC'?: string;
    /**
     * 
     * @type {ItemCondition}
     * @memberof Bottom
     */
    'itemCondition'?: ItemCondition;
    /**
     * 
     * @type {ItemStatus}
     * @memberof Bottom
     */
    'itemStatus'?: ItemStatus;
    /**
     * 
     * @type {number}
     * @memberof Bottom
     */
    'numberOfWears'?: number;
    /**
     * 
     * @type {number}
     * @memberof Bottom
     */
    'wearsBeforeDirty'?: number;
    /**
     * 
     * @type {number}
     * @memberof Bottom
     */
    'wearsLeftBeforeDirty'?: number;
    /**
     * 
     * @type {string}
     * @memberof Bottom
     */
    'primaryColor'?: string;
    /**
     * 
     * @type {string}
     * @memberof Bottom
     */
    'secondaryColor'?: string;
    /**
     * 
     * @type {string}
     * @memberof Bottom
     */
    'accentColor'?: string;
    /**
     * 
     * @type {string}
     * @memberof Bottom
     */
    'pattern'?: string;
    /**
     * 
     * @type {BottomType}
     * @memberof Bottom
     */
    'type'?: BottomType;
    /**
     * 
     * @type {number}
     * @memberof Bottom
     */
    'sizeHipInchesLow'?: number;
    /**
     * 
     * @type {number}
     * @memberof Bottom
     */
    'sizeHipInchesHigh'?: number;
    /**
     * 
     * @type {BottomInseamType}
     * @memberof Bottom
     */
    'bottomInseamType'?: BottomInseamType;
    /**
     * 
     * @type {number}
     * @memberof Bottom
     */
    'inseamInches'?: number;
}
/**
 * 
 * @export
 * @interface BottomAllOf
 */
export interface BottomAllOf {
    /**
     * 
     * @type {BottomType}
     * @memberof BottomAllOf
     */
    'type'?: BottomType;
    /**
     * 
     * @type {number}
     * @memberof BottomAllOf
     */
    'sizeHipInchesLow'?: number;
    /**
     * 
     * @type {number}
     * @memberof BottomAllOf
     */
    'sizeHipInchesHigh'?: number;
    /**
     * 
     * @type {BottomInseamType}
     * @memberof BottomAllOf
     */
    'bottomInseamType'?: BottomInseamType;
    /**
     * 
     * @type {number}
     * @memberof BottomAllOf
     */
    'inseamInches'?: number;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const BottomInseamType = {
    Short: 'SHORT',
    Regular: 'REGULAR',
    Tall: 'TALL',
    Unknown: 'UNKNOWN'
} as const;

export type BottomInseamType = typeof BottomInseamType[keyof typeof BottomInseamType];


/**
 * 
 * @export
 * @enum {string}
 */

export const BottomType = {
    Sweat: 'SWEAT',
    Dress: 'DRESS',
    Under: 'UNDER',
    Sleep: 'SLEEP',
    Workout: 'WORKOUT',
    Jeans: 'JEANS',
    Kakis: 'KAKIS',
    Unknown: 'UNKNOWN'
} as const;

export type BottomType = typeof BottomType[keyof typeof BottomType];


/**
 * 
 * @export
 * @interface ClothingItem
 */
export interface ClothingItem {
    /**
     * 
     * @type {string}
     * @memberof ClothingItem
     */
    'uriImage'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClothingItem
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClothingItem
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClothingItem
     */
    'timestampAddedRFC'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClothingItem
     */
    'timestampLastModifiedRFC'?: string;
    /**
     * 
     * @type {number}
     * @memberof ClothingItem
     */
    'rating'?: number;
    /**
     * 
     * @type {string}
     * @memberof ClothingItem
     */
    'code'?: string;
    /**
     * 
     * @type {SizeUsLetter}
     * @memberof ClothingItem
     */
    'sizeUSLetter'?: SizeUsLetter;
    /**
     * 
     * @type {number}
     * @memberof ClothingItem
     */
    'sizeUSNumber'?: number;
    /**
     * 
     * @type {string}
     * @memberof ClothingItem
     */
    'brand'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClothingItem
     */
    'timestampPurchasedRFC'?: string;
    /**
     * 
     * @type {ItemCondition}
     * @memberof ClothingItem
     */
    'itemCondition'?: ItemCondition;
    /**
     * 
     * @type {ItemStatus}
     * @memberof ClothingItem
     */
    'itemStatus'?: ItemStatus;
    /**
     * 
     * @type {number}
     * @memberof ClothingItem
     */
    'numberOfWears'?: number;
    /**
     * 
     * @type {number}
     * @memberof ClothingItem
     */
    'wearsBeforeDirty'?: number;
    /**
     * 
     * @type {number}
     * @memberof ClothingItem
     */
    'wearsLeftBeforeDirty'?: number;
    /**
     * 
     * @type {string}
     * @memberof ClothingItem
     */
    'primaryColor'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClothingItem
     */
    'secondaryColor'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClothingItem
     */
    'accentColor'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClothingItem
     */
    'pattern'?: string;
}
/**
 * 
 * @export
 * @interface ClothingItemAllOf
 */
export interface ClothingItemAllOf {
    /**
     * 
     * @type {string}
     * @memberof ClothingItemAllOf
     */
    'code'?: string;
    /**
     * 
     * @type {SizeUsLetter}
     * @memberof ClothingItemAllOf
     */
    'sizeUSLetter'?: SizeUsLetter;
    /**
     * 
     * @type {number}
     * @memberof ClothingItemAllOf
     */
    'sizeUSNumber'?: number;
    /**
     * 
     * @type {string}
     * @memberof ClothingItemAllOf
     */
    'brand'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClothingItemAllOf
     */
    'timestampPurchasedRFC'?: string;
    /**
     * 
     * @type {ItemCondition}
     * @memberof ClothingItemAllOf
     */
    'itemCondition'?: ItemCondition;
    /**
     * 
     * @type {ItemStatus}
     * @memberof ClothingItemAllOf
     */
    'itemStatus'?: ItemStatus;
    /**
     * 
     * @type {number}
     * @memberof ClothingItemAllOf
     */
    'numberOfWears'?: number;
    /**
     * 
     * @type {number}
     * @memberof ClothingItemAllOf
     */
    'wearsBeforeDirty'?: number;
    /**
     * 
     * @type {number}
     * @memberof ClothingItemAllOf
     */
    'wearsLeftBeforeDirty'?: number;
    /**
     * 
     * @type {string}
     * @memberof ClothingItemAllOf
     */
    'primaryColor'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClothingItemAllOf
     */
    'secondaryColor'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClothingItemAllOf
     */
    'accentColor'?: string;
    /**
     * 
     * @type {string}
     * @memberof ClothingItemAllOf
     */
    'pattern'?: string;
}
/**
 * 
 * @export
 * @interface DatalessResponse
 */
export interface DatalessResponse {
    /**
     * 
     * @type {boolean}
     * @memberof DatalessResponse
     */
    'success'?: boolean;
}
/**
 * 
 * @export
 * @interface Entity
 */
export interface Entity {
    /**
     * 
     * @type {string}
     * @memberof Entity
     */
    'uriImage'?: string;
    /**
     * 
     * @type {string}
     * @memberof Entity
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Entity
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof Entity
     */
    'timestampAddedRFC'?: string;
    /**
     * 
     * @type {string}
     * @memberof Entity
     */
    'timestampLastModifiedRFC'?: string;
    /**
     * 
     * @type {number}
     * @memberof Entity
     */
    'rating'?: number;
}
/**
 * 
 * @export
 * @interface ErrorType
 */
export interface ErrorType {
    /**
     * 
     * @type {boolean}
     * @memberof ErrorType
     */
    'success'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ErrorType
     */
    'errorMessage'?: string;
    /**
     * 
     * @type {object}
     * @memberof ErrorType
     */
    'error'?: object | null;
    /**
     * 
     * @type {object}
     * @memberof ErrorType
     */
    'detail'?: object | null;
}
/**
 * 
 * @export
 * @interface Feet
 */
export interface Feet {
    /**
     * 
     * @type {string}
     * @memberof Feet
     */
    'uriImage'?: string;
    /**
     * 
     * @type {string}
     * @memberof Feet
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Feet
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof Feet
     */
    'timestampAddedRFC'?: string;
    /**
     * 
     * @type {string}
     * @memberof Feet
     */
    'timestampLastModifiedRFC'?: string;
    /**
     * 
     * @type {number}
     * @memberof Feet
     */
    'rating'?: number;
    /**
     * 
     * @type {string}
     * @memberof Feet
     */
    'code'?: string;
    /**
     * 
     * @type {SizeUsLetter}
     * @memberof Feet
     */
    'sizeUSLetter'?: SizeUsLetter;
    /**
     * 
     * @type {number}
     * @memberof Feet
     */
    'sizeUSNumber'?: number;
    /**
     * 
     * @type {string}
     * @memberof Feet
     */
    'brand'?: string;
    /**
     * 
     * @type {string}
     * @memberof Feet
     */
    'timestampPurchasedRFC'?: string;
    /**
     * 
     * @type {ItemCondition}
     * @memberof Feet
     */
    'itemCondition'?: ItemCondition;
    /**
     * 
     * @type {ItemStatus}
     * @memberof Feet
     */
    'itemStatus'?: ItemStatus;
    /**
     * 
     * @type {number}
     * @memberof Feet
     */
    'numberOfWears'?: number;
    /**
     * 
     * @type {number}
     * @memberof Feet
     */
    'wearsBeforeDirty'?: number;
    /**
     * 
     * @type {number}
     * @memberof Feet
     */
    'wearsLeftBeforeDirty'?: number;
    /**
     * 
     * @type {string}
     * @memberof Feet
     */
    'primaryColor'?: string;
    /**
     * 
     * @type {string}
     * @memberof Feet
     */
    'secondaryColor'?: string;
    /**
     * 
     * @type {string}
     * @memberof Feet
     */
    'accentColor'?: string;
    /**
     * 
     * @type {string}
     * @memberof Feet
     */
    'pattern'?: string;
    /**
     * 
     * @type {FeetType}
     * @memberof Feet
     */
    'type'?: FeetType;
    /**
     * 
     * @type {number}
     * @memberof Feet
     */
    'sizeInches'?: number;
}
/**
 * 
 * @export
 * @interface FeetAllOf
 */
export interface FeetAllOf {
    /**
     * 
     * @type {FeetType}
     * @memberof FeetAllOf
     */
    'type'?: FeetType;
    /**
     * 
     * @type {number}
     * @memberof FeetAllOf
     */
    'sizeInches'?: number;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const FeetType = {
    DressShoe: 'DRESS_SHOE',
    TennisShoe: 'TENNIS_SHOE',
    CasualShoe: 'CASUAL_SHOE',
    HeelShoe: 'HEEL_SHOE',
    FlipFlopShoe: 'FLIP_FLOP_SHOE',
    SandalShoe: 'SANDAL_SHOE',
    DressSock: 'DRESS_SOCK',
    CasualSock: 'CASUAL_SOCK',
    Unknown: 'UNKNOWN'
} as const;

export type FeetType = typeof FeetType[keyof typeof FeetType];


/**
 * 
 * @export
 * @interface Head
 */
export interface Head {
    /**
     * 
     * @type {string}
     * @memberof Head
     */
    'uriImage'?: string;
    /**
     * 
     * @type {string}
     * @memberof Head
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Head
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof Head
     */
    'timestampAddedRFC'?: string;
    /**
     * 
     * @type {string}
     * @memberof Head
     */
    'timestampLastModifiedRFC'?: string;
    /**
     * 
     * @type {number}
     * @memberof Head
     */
    'rating'?: number;
    /**
     * 
     * @type {string}
     * @memberof Head
     */
    'code'?: string;
    /**
     * 
     * @type {SizeUsLetter}
     * @memberof Head
     */
    'sizeUSLetter'?: SizeUsLetter;
    /**
     * 
     * @type {number}
     * @memberof Head
     */
    'sizeUSNumber'?: number;
    /**
     * 
     * @type {string}
     * @memberof Head
     */
    'brand'?: string;
    /**
     * 
     * @type {string}
     * @memberof Head
     */
    'timestampPurchasedRFC'?: string;
    /**
     * 
     * @type {ItemCondition}
     * @memberof Head
     */
    'itemCondition'?: ItemCondition;
    /**
     * 
     * @type {ItemStatus}
     * @memberof Head
     */
    'itemStatus'?: ItemStatus;
    /**
     * 
     * @type {number}
     * @memberof Head
     */
    'numberOfWears'?: number;
    /**
     * 
     * @type {number}
     * @memberof Head
     */
    'wearsBeforeDirty'?: number;
    /**
     * 
     * @type {number}
     * @memberof Head
     */
    'wearsLeftBeforeDirty'?: number;
    /**
     * 
     * @type {string}
     * @memberof Head
     */
    'primaryColor'?: string;
    /**
     * 
     * @type {string}
     * @memberof Head
     */
    'secondaryColor'?: string;
    /**
     * 
     * @type {string}
     * @memberof Head
     */
    'accentColor'?: string;
    /**
     * 
     * @type {string}
     * @memberof Head
     */
    'pattern'?: string;
    /**
     * 
     * @type {HeadType}
     * @memberof Head
     */
    'type'?: HeadType;
    /**
     * 
     * @type {number}
     * @memberof Head
     */
    'sizeInchesLow'?: number;
    /**
     * 
     * @type {number}
     * @memberof Head
     */
    'sizeInchesHigh'?: number;
}
/**
 * 
 * @export
 * @interface HeadAllOf
 */
export interface HeadAllOf {
    /**
     * 
     * @type {HeadType}
     * @memberof HeadAllOf
     */
    'type'?: HeadType;
    /**
     * 
     * @type {number}
     * @memberof HeadAllOf
     */
    'sizeInchesLow'?: number;
    /**
     * 
     * @type {number}
     * @memberof HeadAllOf
     */
    'sizeInchesHigh'?: number;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const HeadType = {
    BaseballHat: 'BASEBALL_HAT',
    Beanie: 'BEANIE',
    Bandana: 'BANDANA',
    Glasses: 'GLASSES',
    Unknown: 'UNKNOWN'
} as const;

export type HeadType = typeof HeadType[keyof typeof HeadType];


/**
 * 
 * @export
 * @enum {string}
 */

export const ItemCondition = {
    New: 'NEW',
    LikeNew: 'LIKE_NEW',
    Good: 'GOOD',
    Fair: 'FAIR',
    Poor: 'POOR',
    Trash: 'TRASH',
    Unknown: 'UNKNOWN'
} as const;

export type ItemCondition = typeof ItemCondition[keyof typeof ItemCondition];


/**
 * 
 * @export
 * @enum {string}
 */

export const ItemStatus = {
    Clean: 'CLEAN',
    Dirty: 'DIRTY',
    Worn: 'WORN',
    Ok: 'OK',
    Unknown: 'UNKNOWN'
} as const;

export type ItemStatus = typeof ItemStatus[keyof typeof ItemStatus];


/**
 * 
 * @export
 * @interface Outfit
 */
export interface Outfit {
    /**
     * 
     * @type {string}
     * @memberof Outfit
     */
    'uriImage'?: string;
    /**
     * 
     * @type {string}
     * @memberof Outfit
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Outfit
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof Outfit
     */
    'timestampAddedRFC'?: string;
    /**
     * 
     * @type {string}
     * @memberof Outfit
     */
    'timestampLastModifiedRFC'?: string;
    /**
     * 
     * @type {number}
     * @memberof Outfit
     */
    'rating'?: number;
    /**
     * 
     * @type {OutfitType}
     * @memberof Outfit
     */
    'type'?: OutfitType;
    /**
     * 
     * @type {number}
     * @memberof Outfit
     */
    'topId'?: number;
    /**
     * 
     * @type {number}
     * @memberof Outfit
     */
    'bottomId'?: number;
    /**
     * 
     * @type {number}
     * @memberof Outfit
     */
    'headId'?: number;
    /**
     * 
     * @type {number}
     * @memberof Outfit
     */
    'feetId'?: number;
    /**
     * 
     * @type {number}
     * @memberof Outfit
     */
    'wristId'?: number;
}
/**
 * 
 * @export
 * @interface OutfitAllOf
 */
export interface OutfitAllOf {
    /**
     * 
     * @type {OutfitType}
     * @memberof OutfitAllOf
     */
    'type'?: OutfitType;
    /**
     * 
     * @type {number}
     * @memberof OutfitAllOf
     */
    'topId'?: number;
    /**
     * 
     * @type {number}
     * @memberof OutfitAllOf
     */
    'bottomId'?: number;
    /**
     * 
     * @type {number}
     * @memberof OutfitAllOf
     */
    'headId'?: number;
    /**
     * 
     * @type {number}
     * @memberof OutfitAllOf
     */
    'feetId'?: number;
    /**
     * 
     * @type {number}
     * @memberof OutfitAllOf
     */
    'wristId'?: number;
    /**
     * 
     * @type {number}
     * @memberof OutfitAllOf
     */
    'rating'?: number;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const OutfitType = {
    Formal: 'FORMAL',
    Casual: 'CASUAL',
    Business: 'BUSINESS',
    BusinessCasual: 'BUSINESS_CASUAL',
    Sport: 'SPORT',
    Sleep: 'SLEEP',
    Unknown: 'UNKNOWN'
} as const;

export type OutfitType = typeof OutfitType[keyof typeof OutfitType];


/**
 * 
 * @export
 * @enum {string}
 */

export const SizeUsLetter = {
    _5Xs: '5XS',
    _4Xs: '4XS',
    _3Xs: '3XS',
    _2Xs: '2XS',
    Xs: 'XS',
    S: 'S',
    M: 'M',
    L: 'L',
    Xl: 'XL',
    _2Xl: '2XL',
    _3Xl: '3XL',
    _4Xl: '4XL',
    _5Xl: '5XL',
    Unknown: 'UNKNOWN'
} as const;

export type SizeUsLetter = typeof SizeUsLetter[keyof typeof SizeUsLetter];


/**
 * 
 * @export
 * @interface Top
 */
export interface Top {
    /**
     * 
     * @type {string}
     * @memberof Top
     */
    'uriImage'?: string;
    /**
     * 
     * @type {string}
     * @memberof Top
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Top
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof Top
     */
    'timestampAddedRFC'?: string;
    /**
     * 
     * @type {string}
     * @memberof Top
     */
    'timestampLastModifiedRFC'?: string;
    /**
     * 
     * @type {number}
     * @memberof Top
     */
    'rating'?: number;
    /**
     * 
     * @type {string}
     * @memberof Top
     */
    'code'?: string;
    /**
     * 
     * @type {SizeUsLetter}
     * @memberof Top
     */
    'sizeUSLetter'?: SizeUsLetter;
    /**
     * 
     * @type {number}
     * @memberof Top
     */
    'sizeUSNumber'?: number;
    /**
     * 
     * @type {string}
     * @memberof Top
     */
    'brand'?: string;
    /**
     * 
     * @type {string}
     * @memberof Top
     */
    'timestampPurchasedRFC'?: string;
    /**
     * 
     * @type {ItemCondition}
     * @memberof Top
     */
    'itemCondition'?: ItemCondition;
    /**
     * 
     * @type {ItemStatus}
     * @memberof Top
     */
    'itemStatus'?: ItemStatus;
    /**
     * 
     * @type {number}
     * @memberof Top
     */
    'numberOfWears'?: number;
    /**
     * 
     * @type {number}
     * @memberof Top
     */
    'wearsBeforeDirty'?: number;
    /**
     * 
     * @type {number}
     * @memberof Top
     */
    'wearsLeftBeforeDirty'?: number;
    /**
     * 
     * @type {string}
     * @memberof Top
     */
    'primaryColor'?: string;
    /**
     * 
     * @type {string}
     * @memberof Top
     */
    'secondaryColor'?: string;
    /**
     * 
     * @type {string}
     * @memberof Top
     */
    'accentColor'?: string;
    /**
     * 
     * @type {string}
     * @memberof Top
     */
    'pattern'?: string;
    /**
     * 
     * @type {TopType}
     * @memberof Top
     */
    'type'?: TopType;
    /**
     * 
     * @type {number}
     * @memberof Top
     */
    'sizeChestInchesLow'?: number;
    /**
     * 
     * @type {number}
     * @memberof Top
     */
    'sizeChestInchesHigh'?: number;
    /**
     * 
     * @type {number}
     * @memberof Top
     */
    'sizeNeckInchesLow'?: number;
    /**
     * 
     * @type {number}
     * @memberof Top
     */
    'sizeNeckInchesHigh'?: number;
    /**
     * 
     * @type {number}
     * @memberof Top
     */
    'sizeWaistInchesLow'?: number;
    /**
     * 
     * @type {number}
     * @memberof Top
     */
    'sizeWaistInchesHigh'?: number;
    /**
     * 
     * @type {number}
     * @memberof Top
     */
    'sizeSleeveInches'?: number;
}
/**
 * 
 * @export
 * @interface TopAllOf
 */
export interface TopAllOf {
    /**
     * 
     * @type {TopType}
     * @memberof TopAllOf
     */
    'type'?: TopType;
    /**
     * 
     * @type {number}
     * @memberof TopAllOf
     */
    'sizeChestInchesLow'?: number;
    /**
     * 
     * @type {number}
     * @memberof TopAllOf
     */
    'sizeChestInchesHigh'?: number;
    /**
     * 
     * @type {number}
     * @memberof TopAllOf
     */
    'sizeNeckInchesLow'?: number;
    /**
     * 
     * @type {number}
     * @memberof TopAllOf
     */
    'sizeNeckInchesHigh'?: number;
    /**
     * 
     * @type {number}
     * @memberof TopAllOf
     */
    'sizeWaistInchesLow'?: number;
    /**
     * 
     * @type {number}
     * @memberof TopAllOf
     */
    'sizeWaistInchesHigh'?: number;
    /**
     * 
     * @type {number}
     * @memberof TopAllOf
     */
    'sizeSleeveInches'?: number;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const TopType = {
    Tee: 'TEE',
    Sweat: 'SWEAT',
    Dress: 'DRESS',
    Flannel: 'FLANNEL',
    Under: 'UNDER',
    Sleep: 'SLEEP',
    Casual: 'CASUAL',
    Workout: 'WORKOUT',
    Unknown: 'UNKNOWN'
} as const;

export type TopType = typeof TopType[keyof typeof TopType];


/**
 * 
 * @export
 * @interface WithId
 */
export interface WithId {
    /**
     * 
     * @type {number}
     * @memberof WithId
     */
    'id'?: number;
}
/**
 * 
 * @export
 * @interface Wrist
 */
export interface Wrist {
    /**
     * 
     * @type {string}
     * @memberof Wrist
     */
    'uriImage'?: string;
    /**
     * 
     * @type {string}
     * @memberof Wrist
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Wrist
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof Wrist
     */
    'timestampAddedRFC'?: string;
    /**
     * 
     * @type {string}
     * @memberof Wrist
     */
    'timestampLastModifiedRFC'?: string;
    /**
     * 
     * @type {number}
     * @memberof Wrist
     */
    'rating'?: number;
    /**
     * 
     * @type {string}
     * @memberof Wrist
     */
    'code'?: string;
    /**
     * 
     * @type {SizeUsLetter}
     * @memberof Wrist
     */
    'sizeUSLetter'?: SizeUsLetter;
    /**
     * 
     * @type {number}
     * @memberof Wrist
     */
    'sizeUSNumber'?: number;
    /**
     * 
     * @type {string}
     * @memberof Wrist
     */
    'brand'?: string;
    /**
     * 
     * @type {string}
     * @memberof Wrist
     */
    'timestampPurchasedRFC'?: string;
    /**
     * 
     * @type {ItemCondition}
     * @memberof Wrist
     */
    'itemCondition'?: ItemCondition;
    /**
     * 
     * @type {ItemStatus}
     * @memberof Wrist
     */
    'itemStatus'?: ItemStatus;
    /**
     * 
     * @type {number}
     * @memberof Wrist
     */
    'numberOfWears'?: number;
    /**
     * 
     * @type {number}
     * @memberof Wrist
     */
    'wearsBeforeDirty'?: number;
    /**
     * 
     * @type {number}
     * @memberof Wrist
     */
    'wearsLeftBeforeDirty'?: number;
    /**
     * 
     * @type {string}
     * @memberof Wrist
     */
    'primaryColor'?: string;
    /**
     * 
     * @type {string}
     * @memberof Wrist
     */
    'secondaryColor'?: string;
    /**
     * 
     * @type {string}
     * @memberof Wrist
     */
    'accentColor'?: string;
    /**
     * 
     * @type {string}
     * @memberof Wrist
     */
    'pattern'?: string;
    /**
     * 
     * @type {WristType}
     * @memberof Wrist
     */
    'type'?: WristType;
    /**
     * 
     * @type {number}
     * @memberof Wrist
     */
    'sizeInches'?: number;
}
/**
 * 
 * @export
 * @interface WristAllOf
 */
export interface WristAllOf {
    /**
     * 
     * @type {WristType}
     * @memberof WristAllOf
     */
    'type'?: WristType;
    /**
     * 
     * @type {number}
     * @memberof WristAllOf
     */
    'sizeInches'?: number;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const WristType = {
    Watch: 'WATCH',
    Bracelet: 'BRACELET',
    Unknown: 'UNKNOWN'
} as const;

export type WristType = typeof WristType[keyof typeof WristType];



/**
 * AccessoriesApi - axios parameter creator
 * @export
 */
export const AccessoriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Accessory Item
         * @param {Accessory} accessory A JSON object containing accessory info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAccessoryItem: async (accessory: Accessory, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accessory' is not null or undefined
            assertParamExists('createAccessoryItem', 'accessory', accessory)
            const localVarPath = `/accessories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(accessory, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Accessory Item by Id
         * @param {number} id ID of the Accessory Item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAccessoryItemById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteAccessoryItemById', 'id', id)
            const localVarPath = `/accessories/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete All Accessory Items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAllAccessoryItems: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/accessories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Accessory Item by Id
         * @param {number} id ID of the Accessory Item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccessoryByIdItem: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAccessoryByIdItem', 'id', id)
            const localVarPath = `/accessories/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get All Accessory Items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAccessoryItems: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/accessories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccessoriesApi - functional programming interface
 * @export
 */
export const AccessoriesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccessoriesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Accessory Item
         * @param {Accessory} accessory A JSON object containing accessory info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAccessoryItem(accessory: Accessory, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatalessResponse & object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAccessoryItem(accessory, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Accessory Item by Id
         * @param {number} id ID of the Accessory Item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAccessoryItemById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatalessResponse & object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAccessoryItemById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete All Accessory Items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAllAccessoryItems(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WithId & DatalessResponse & Array<object>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAllAccessoryItems(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Accessory Item by Id
         * @param {number} id ID of the Accessory Item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccessoryByIdItem(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatalessResponse & object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccessoryByIdItem(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get All Accessory Items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllAccessoryItems(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WithId & DatalessResponse & Array<object>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllAccessoryItems(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AccessoriesApi - factory interface
 * @export
 */
export const AccessoriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccessoriesApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Accessory Item
         * @param {Accessory} accessory A JSON object containing accessory info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAccessoryItem(accessory: Accessory, options?: any): AxiosPromise<DatalessResponse & object> {
            return localVarFp.createAccessoryItem(accessory, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Accessory Item by Id
         * @param {number} id ID of the Accessory Item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAccessoryItemById(id: number, options?: any): AxiosPromise<DatalessResponse & object> {
            return localVarFp.deleteAccessoryItemById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete All Accessory Items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAllAccessoryItems(options?: any): AxiosPromise<WithId & DatalessResponse & Array<object>> {
            return localVarFp.deleteAllAccessoryItems(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Accessory Item by Id
         * @param {number} id ID of the Accessory Item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccessoryByIdItem(id: number, options?: any): AxiosPromise<DatalessResponse & object> {
            return localVarFp.getAccessoryByIdItem(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get All Accessory Items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAccessoryItems(options?: any): AxiosPromise<WithId & DatalessResponse & Array<object>> {
            return localVarFp.getAllAccessoryItems(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccessoriesApi - object-oriented interface
 * @export
 * @class AccessoriesApi
 * @extends {BaseAPI}
 */
export class AccessoriesApi extends BaseAPI {
    /**
     * 
     * @summary Create Accessory Item
     * @param {Accessory} accessory A JSON object containing accessory info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessoriesApi
     */
    public createAccessoryItem(accessory: Accessory, options?: AxiosRequestConfig) {
        return AccessoriesApiFp(this.configuration).createAccessoryItem(accessory, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Accessory Item by Id
     * @param {number} id ID of the Accessory Item
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessoriesApi
     */
    public deleteAccessoryItemById(id: number, options?: AxiosRequestConfig) {
        return AccessoriesApiFp(this.configuration).deleteAccessoryItemById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete All Accessory Items
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessoriesApi
     */
    public deleteAllAccessoryItems(options?: AxiosRequestConfig) {
        return AccessoriesApiFp(this.configuration).deleteAllAccessoryItems(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Accessory Item by Id
     * @param {number} id ID of the Accessory Item
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessoriesApi
     */
    public getAccessoryByIdItem(id: number, options?: AxiosRequestConfig) {
        return AccessoriesApiFp(this.configuration).getAccessoryByIdItem(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get All Accessory Items
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessoriesApi
     */
    public getAllAccessoryItems(options?: AxiosRequestConfig) {
        return AccessoriesApiFp(this.configuration).getAllAccessoryItems(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getToken: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getToken(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessTokenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getToken(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @summary Get Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getToken(options?: any): AxiosPromise<AccessTokenResponse> {
            return localVarFp.getToken(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @summary Get Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public getToken(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).getToken(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * BottomsApi - axios parameter creator
 * @export
 */
export const BottomsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Bottom Item
         * @param {Bottom} bottom A JSON object containing bottom info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBottomItem: async (bottom: Bottom, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bottom' is not null or undefined
            assertParamExists('createBottomItem', 'bottom', bottom)
            const localVarPath = `/bottoms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bottom, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete All Bottom Items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAllBottomItems: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/bottoms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Bottom Item by Id
         * @param {number} id ID of the Bottom Item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBottomItemById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteBottomItemById', 'id', id)
            const localVarPath = `/bottoms/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get All Bottom Items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllBottomItems: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/bottoms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Bottom Item by Id
         * @param {number} id ID of the Bottom Item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBottomByIdItem: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getBottomByIdItem', 'id', id)
            const localVarPath = `/bottoms/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Accessory Item by Id
         * @param {number} id ID of the Accessory Item
         * @param {Accessory} accessory A JSON object containing accessory info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAccessoryItemById: async (id: number, accessory: Accessory, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateAccessoryItemById', 'id', id)
            // verify required parameter 'accessory' is not null or undefined
            assertParamExists('updateAccessoryItemById', 'accessory', accessory)
            const localVarPath = `/accessories/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(accessory, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Bottom Item by Id
         * @param {number} id ID of the Bottom Item
         * @param {Bottom} bottom A JSON object containing bottom info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBottomItemById: async (id: number, bottom: Bottom, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateBottomItemById', 'id', id)
            // verify required parameter 'bottom' is not null or undefined
            assertParamExists('updateBottomItemById', 'bottom', bottom)
            const localVarPath = `/bottoms/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bottom, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BottomsApi - functional programming interface
 * @export
 */
export const BottomsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BottomsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Bottom Item
         * @param {Bottom} bottom A JSON object containing bottom info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBottomItem(bottom: Bottom, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatalessResponse & object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBottomItem(bottom, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete All Bottom Items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAllBottomItems(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WithId & DatalessResponse & Array<object>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAllBottomItems(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Bottom Item by Id
         * @param {number} id ID of the Bottom Item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBottomItemById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatalessResponse & object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBottomItemById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get All Bottom Items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllBottomItems(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WithId & DatalessResponse & Array<object>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllBottomItems(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Bottom Item by Id
         * @param {number} id ID of the Bottom Item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBottomByIdItem(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatalessResponse & object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBottomByIdItem(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Accessory Item by Id
         * @param {number} id ID of the Accessory Item
         * @param {Accessory} accessory A JSON object containing accessory info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAccessoryItemById(id: number, accessory: Accessory, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatalessResponse & object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAccessoryItemById(id, accessory, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Bottom Item by Id
         * @param {number} id ID of the Bottom Item
         * @param {Bottom} bottom A JSON object containing bottom info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBottomItemById(id: number, bottom: Bottom, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatalessResponse & object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBottomItemById(id, bottom, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BottomsApi - factory interface
 * @export
 */
export const BottomsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BottomsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Bottom Item
         * @param {Bottom} bottom A JSON object containing bottom info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBottomItem(bottom: Bottom, options?: any): AxiosPromise<DatalessResponse & object> {
            return localVarFp.createBottomItem(bottom, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete All Bottom Items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAllBottomItems(options?: any): AxiosPromise<WithId & DatalessResponse & Array<object>> {
            return localVarFp.deleteAllBottomItems(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Bottom Item by Id
         * @param {number} id ID of the Bottom Item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBottomItemById(id: number, options?: any): AxiosPromise<DatalessResponse & object> {
            return localVarFp.deleteBottomItemById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get All Bottom Items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllBottomItems(options?: any): AxiosPromise<WithId & DatalessResponse & Array<object>> {
            return localVarFp.getAllBottomItems(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Bottom Item by Id
         * @param {number} id ID of the Bottom Item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBottomByIdItem(id: number, options?: any): AxiosPromise<DatalessResponse & object> {
            return localVarFp.getBottomByIdItem(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Accessory Item by Id
         * @param {number} id ID of the Accessory Item
         * @param {Accessory} accessory A JSON object containing accessory info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAccessoryItemById(id: number, accessory: Accessory, options?: any): AxiosPromise<DatalessResponse & object> {
            return localVarFp.updateAccessoryItemById(id, accessory, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Bottom Item by Id
         * @param {number} id ID of the Bottom Item
         * @param {Bottom} bottom A JSON object containing bottom info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBottomItemById(id: number, bottom: Bottom, options?: any): AxiosPromise<DatalessResponse & object> {
            return localVarFp.updateBottomItemById(id, bottom, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BottomsApi - object-oriented interface
 * @export
 * @class BottomsApi
 * @extends {BaseAPI}
 */
export class BottomsApi extends BaseAPI {
    /**
     * 
     * @summary Create Bottom Item
     * @param {Bottom} bottom A JSON object containing bottom info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BottomsApi
     */
    public createBottomItem(bottom: Bottom, options?: AxiosRequestConfig) {
        return BottomsApiFp(this.configuration).createBottomItem(bottom, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete All Bottom Items
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BottomsApi
     */
    public deleteAllBottomItems(options?: AxiosRequestConfig) {
        return BottomsApiFp(this.configuration).deleteAllBottomItems(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Bottom Item by Id
     * @param {number} id ID of the Bottom Item
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BottomsApi
     */
    public deleteBottomItemById(id: number, options?: AxiosRequestConfig) {
        return BottomsApiFp(this.configuration).deleteBottomItemById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get All Bottom Items
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BottomsApi
     */
    public getAllBottomItems(options?: AxiosRequestConfig) {
        return BottomsApiFp(this.configuration).getAllBottomItems(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Bottom Item by Id
     * @param {number} id ID of the Bottom Item
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BottomsApi
     */
    public getBottomByIdItem(id: number, options?: AxiosRequestConfig) {
        return BottomsApiFp(this.configuration).getBottomByIdItem(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Accessory Item by Id
     * @param {number} id ID of the Accessory Item
     * @param {Accessory} accessory A JSON object containing accessory info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BottomsApi
     */
    public updateAccessoryItemById(id: number, accessory: Accessory, options?: AxiosRequestConfig) {
        return BottomsApiFp(this.configuration).updateAccessoryItemById(id, accessory, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Bottom Item by Id
     * @param {number} id ID of the Bottom Item
     * @param {Bottom} bottom A JSON object containing bottom info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BottomsApi
     */
    public updateBottomItemById(id: number, bottom: Bottom, options?: AxiosRequestConfig) {
        return BottomsApiFp(this.configuration).updateBottomItemById(id, bottom, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * FeetApi - axios parameter creator
 * @export
 */
export const FeetApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Feet Item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFeetItem: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/feet`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete All Feet Items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAllFeetItems: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/feet`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Feet Item by Id
         * @param {number} id ID of the Feet Item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFeetById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteFeetById', 'id', id)
            const localVarPath = `/feet/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get All Feet Items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllFeetItems: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/feet`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Feet Item by Id
         * @param {number} id ID of the Feet Item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeetItemById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getFeetItemById', 'id', id)
            const localVarPath = `/feet/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Feet Item by Id
         * @param {number} id ID of the Feet Item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFeetItemById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateFeetItemById', 'id', id)
            const localVarPath = `/feet/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FeetApi - functional programming interface
 * @export
 */
export const FeetApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FeetApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Feet Item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFeetItem(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatalessResponse & object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createFeetItem(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete All Feet Items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAllFeetItems(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatalessResponse & Array<object>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAllFeetItems(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Feet Item by Id
         * @param {number} id ID of the Feet Item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFeetById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatalessResponse & object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFeetById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get All Feet Items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllFeetItems(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatalessResponse & Array<object>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllFeetItems(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Feet Item by Id
         * @param {number} id ID of the Feet Item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFeetItemById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatalessResponse & object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFeetItemById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Feet Item by Id
         * @param {number} id ID of the Feet Item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateFeetItemById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatalessResponse & object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateFeetItemById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FeetApi - factory interface
 * @export
 */
export const FeetApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FeetApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Feet Item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFeetItem(options?: any): AxiosPromise<DatalessResponse & object> {
            return localVarFp.createFeetItem(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete All Feet Items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAllFeetItems(options?: any): AxiosPromise<DatalessResponse & Array<object>> {
            return localVarFp.deleteAllFeetItems(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Feet Item by Id
         * @param {number} id ID of the Feet Item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFeetById(id: number, options?: any): AxiosPromise<DatalessResponse & object> {
            return localVarFp.deleteFeetById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get All Feet Items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllFeetItems(options?: any): AxiosPromise<DatalessResponse & Array<object>> {
            return localVarFp.getAllFeetItems(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Feet Item by Id
         * @param {number} id ID of the Feet Item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeetItemById(id: number, options?: any): AxiosPromise<DatalessResponse & object> {
            return localVarFp.getFeetItemById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Feet Item by Id
         * @param {number} id ID of the Feet Item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFeetItemById(id: number, options?: any): AxiosPromise<DatalessResponse & object> {
            return localVarFp.updateFeetItemById(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FeetApi - object-oriented interface
 * @export
 * @class FeetApi
 * @extends {BaseAPI}
 */
export class FeetApi extends BaseAPI {
    /**
     * 
     * @summary Create Feet Item
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeetApi
     */
    public createFeetItem(options?: AxiosRequestConfig) {
        return FeetApiFp(this.configuration).createFeetItem(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete All Feet Items
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeetApi
     */
    public deleteAllFeetItems(options?: AxiosRequestConfig) {
        return FeetApiFp(this.configuration).deleteAllFeetItems(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Feet Item by Id
     * @param {number} id ID of the Feet Item
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeetApi
     */
    public deleteFeetById(id: number, options?: AxiosRequestConfig) {
        return FeetApiFp(this.configuration).deleteFeetById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get All Feet Items
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeetApi
     */
    public getAllFeetItems(options?: AxiosRequestConfig) {
        return FeetApiFp(this.configuration).getAllFeetItems(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Feet Item by Id
     * @param {number} id ID of the Feet Item
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeetApi
     */
    public getFeetItemById(id: number, options?: AxiosRequestConfig) {
        return FeetApiFp(this.configuration).getFeetItemById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Feet Item by Id
     * @param {number} id ID of the Feet Item
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeetApi
     */
    public updateFeetItemById(id: number, options?: AxiosRequestConfig) {
        return FeetApiFp(this.configuration).updateFeetItemById(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * HeadsApi - axios parameter creator
 * @export
 */
export const HeadsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Head Item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createHeadItem: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/heads`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete All Head Items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAllHeadItems: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/heads`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Head Item by Id
         * @param {number} id ID of the Head Item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteHeadById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteHeadById', 'id', id)
            const localVarPath = `/heads/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get All Head Items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllHeadItems: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/heads`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Head Item by Id
         * @param {number} id ID of the Head Item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeadItemById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getHeadItemById', 'id', id)
            const localVarPath = `/heads/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Head Item by Id
         * @param {number} id ID of the Head Item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateHeadItemById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateHeadItemById', 'id', id)
            const localVarPath = `/heads/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HeadsApi - functional programming interface
 * @export
 */
export const HeadsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HeadsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Head Item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createHeadItem(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatalessResponse & object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createHeadItem(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete All Head Items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAllHeadItems(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatalessResponse & Array<object>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAllHeadItems(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Head Item by Id
         * @param {number} id ID of the Head Item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteHeadById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatalessResponse & object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteHeadById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get All Head Items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllHeadItems(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatalessResponse & Array<object>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllHeadItems(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Head Item by Id
         * @param {number} id ID of the Head Item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHeadItemById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatalessResponse & object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHeadItemById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Head Item by Id
         * @param {number} id ID of the Head Item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateHeadItemById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatalessResponse & object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateHeadItemById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * HeadsApi - factory interface
 * @export
 */
export const HeadsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HeadsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Head Item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createHeadItem(options?: any): AxiosPromise<DatalessResponse & object> {
            return localVarFp.createHeadItem(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete All Head Items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAllHeadItems(options?: any): AxiosPromise<DatalessResponse & Array<object>> {
            return localVarFp.deleteAllHeadItems(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Head Item by Id
         * @param {number} id ID of the Head Item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteHeadById(id: number, options?: any): AxiosPromise<DatalessResponse & object> {
            return localVarFp.deleteHeadById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get All Head Items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllHeadItems(options?: any): AxiosPromise<DatalessResponse & Array<object>> {
            return localVarFp.getAllHeadItems(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Head Item by Id
         * @param {number} id ID of the Head Item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeadItemById(id: number, options?: any): AxiosPromise<DatalessResponse & object> {
            return localVarFp.getHeadItemById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Head Item by Id
         * @param {number} id ID of the Head Item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateHeadItemById(id: number, options?: any): AxiosPromise<DatalessResponse & object> {
            return localVarFp.updateHeadItemById(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HeadsApi - object-oriented interface
 * @export
 * @class HeadsApi
 * @extends {BaseAPI}
 */
export class HeadsApi extends BaseAPI {
    /**
     * 
     * @summary Create Head Item
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HeadsApi
     */
    public createHeadItem(options?: AxiosRequestConfig) {
        return HeadsApiFp(this.configuration).createHeadItem(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete All Head Items
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HeadsApi
     */
    public deleteAllHeadItems(options?: AxiosRequestConfig) {
        return HeadsApiFp(this.configuration).deleteAllHeadItems(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Head Item by Id
     * @param {number} id ID of the Head Item
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HeadsApi
     */
    public deleteHeadById(id: number, options?: AxiosRequestConfig) {
        return HeadsApiFp(this.configuration).deleteHeadById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get All Head Items
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HeadsApi
     */
    public getAllHeadItems(options?: AxiosRequestConfig) {
        return HeadsApiFp(this.configuration).getAllHeadItems(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Head Item by Id
     * @param {number} id ID of the Head Item
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HeadsApi
     */
    public getHeadItemById(id: number, options?: AxiosRequestConfig) {
        return HeadsApiFp(this.configuration).getHeadItemById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Head Item by Id
     * @param {number} id ID of the Head Item
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HeadsApi
     */
    public updateHeadItemById(id: number, options?: AxiosRequestConfig) {
        return HeadsApiFp(this.configuration).updateHeadItemById(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OutfitsApi - axios parameter creator
 * @export
 */
export const OutfitsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Outfit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOutfit: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/outfits`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete All Outfits
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAllOutfits: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/outfits`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Outfit by Id
         * @param {number} id ID of the Outfit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOutfitById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteOutfitById', 'id', id)
            const localVarPath = `/outfits/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get All Outfits
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllOutfits: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/outfits`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Outfit by Id
         * @param {number} id ID of the Outfit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOutfitById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getOutfitById', 'id', id)
            const localVarPath = `/outfits/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Outfit by Id
         * @param {number} id ID of the Outfit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOutfitById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateOutfitById', 'id', id)
            const localVarPath = `/outfits/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OutfitsApi - functional programming interface
 * @export
 */
export const OutfitsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OutfitsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Outfit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOutfit(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatalessResponse & object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOutfit(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete All Outfits
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAllOutfits(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatalessResponse & Array<object>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAllOutfits(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Outfit by Id
         * @param {number} id ID of the Outfit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOutfitById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatalessResponse & object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOutfitById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get All Outfits
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllOutfits(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatalessResponse & Array<object>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllOutfits(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Outfit by Id
         * @param {number} id ID of the Outfit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOutfitById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatalessResponse & object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOutfitById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Outfit by Id
         * @param {number} id ID of the Outfit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOutfitById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatalessResponse & object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOutfitById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OutfitsApi - factory interface
 * @export
 */
export const OutfitsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OutfitsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Outfit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOutfit(options?: any): AxiosPromise<DatalessResponse & object> {
            return localVarFp.createOutfit(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete All Outfits
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAllOutfits(options?: any): AxiosPromise<DatalessResponse & Array<object>> {
            return localVarFp.deleteAllOutfits(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Outfit by Id
         * @param {number} id ID of the Outfit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOutfitById(id: number, options?: any): AxiosPromise<DatalessResponse & object> {
            return localVarFp.deleteOutfitById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get All Outfits
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllOutfits(options?: any): AxiosPromise<DatalessResponse & Array<object>> {
            return localVarFp.getAllOutfits(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Outfit by Id
         * @param {number} id ID of the Outfit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOutfitById(id: number, options?: any): AxiosPromise<DatalessResponse & object> {
            return localVarFp.getOutfitById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Outfit by Id
         * @param {number} id ID of the Outfit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOutfitById(id: number, options?: any): AxiosPromise<DatalessResponse & object> {
            return localVarFp.updateOutfitById(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OutfitsApi - object-oriented interface
 * @export
 * @class OutfitsApi
 * @extends {BaseAPI}
 */
export class OutfitsApi extends BaseAPI {
    /**
     * 
     * @summary Create Outfit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OutfitsApi
     */
    public createOutfit(options?: AxiosRequestConfig) {
        return OutfitsApiFp(this.configuration).createOutfit(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete All Outfits
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OutfitsApi
     */
    public deleteAllOutfits(options?: AxiosRequestConfig) {
        return OutfitsApiFp(this.configuration).deleteAllOutfits(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Outfit by Id
     * @param {number} id ID of the Outfit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OutfitsApi
     */
    public deleteOutfitById(id: number, options?: AxiosRequestConfig) {
        return OutfitsApiFp(this.configuration).deleteOutfitById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get All Outfits
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OutfitsApi
     */
    public getAllOutfits(options?: AxiosRequestConfig) {
        return OutfitsApiFp(this.configuration).getAllOutfits(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Outfit by Id
     * @param {number} id ID of the Outfit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OutfitsApi
     */
    public getOutfitById(id: number, options?: AxiosRequestConfig) {
        return OutfitsApiFp(this.configuration).getOutfitById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Outfit by Id
     * @param {number} id ID of the Outfit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OutfitsApi
     */
    public updateOutfitById(id: number, options?: AxiosRequestConfig) {
        return OutfitsApiFp(this.configuration).updateOutfitById(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TopsApi - axios parameter creator
 * @export
 */
export const TopsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Top Item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTopItem: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tops`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete All Top Items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAllTopItems: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tops`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Top Item by Id
         * @param {number} id ID of the Top Item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTopById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTopById', 'id', id)
            const localVarPath = `/tops/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get All Top Items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTopItems: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tops`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Top Item by Id
         * @param {number} id ID of the Top Item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopItemById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getTopItemById', 'id', id)
            const localVarPath = `/tops/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Top Item by Id
         * @param {number} id ID of the Top Item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTopItemById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateTopItemById', 'id', id)
            const localVarPath = `/tops/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TopsApi - functional programming interface
 * @export
 */
export const TopsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TopsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Top Item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTopItem(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatalessResponse & object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTopItem(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete All Top Items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAllTopItems(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatalessResponse & Array<object>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAllTopItems(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Top Item by Id
         * @param {number} id ID of the Top Item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTopById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatalessResponse & object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTopById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get All Top Items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllTopItems(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatalessResponse & Array<object>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllTopItems(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Top Item by Id
         * @param {number} id ID of the Top Item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTopItemById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatalessResponse & object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTopItemById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Top Item by Id
         * @param {number} id ID of the Top Item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTopItemById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatalessResponse & object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTopItemById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TopsApi - factory interface
 * @export
 */
export const TopsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TopsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Top Item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTopItem(options?: any): AxiosPromise<DatalessResponse & object> {
            return localVarFp.createTopItem(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete All Top Items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAllTopItems(options?: any): AxiosPromise<DatalessResponse & Array<object>> {
            return localVarFp.deleteAllTopItems(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Top Item by Id
         * @param {number} id ID of the Top Item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTopById(id: number, options?: any): AxiosPromise<DatalessResponse & object> {
            return localVarFp.deleteTopById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get All Top Items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTopItems(options?: any): AxiosPromise<DatalessResponse & Array<object>> {
            return localVarFp.getAllTopItems(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Top Item by Id
         * @param {number} id ID of the Top Item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopItemById(id: number, options?: any): AxiosPromise<DatalessResponse & object> {
            return localVarFp.getTopItemById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Top Item by Id
         * @param {number} id ID of the Top Item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTopItemById(id: number, options?: any): AxiosPromise<DatalessResponse & object> {
            return localVarFp.updateTopItemById(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TopsApi - object-oriented interface
 * @export
 * @class TopsApi
 * @extends {BaseAPI}
 */
export class TopsApi extends BaseAPI {
    /**
     * 
     * @summary Create Top Item
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TopsApi
     */
    public createTopItem(options?: AxiosRequestConfig) {
        return TopsApiFp(this.configuration).createTopItem(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete All Top Items
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TopsApi
     */
    public deleteAllTopItems(options?: AxiosRequestConfig) {
        return TopsApiFp(this.configuration).deleteAllTopItems(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Top Item by Id
     * @param {number} id ID of the Top Item
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TopsApi
     */
    public deleteTopById(id: number, options?: AxiosRequestConfig) {
        return TopsApiFp(this.configuration).deleteTopById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get All Top Items
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TopsApi
     */
    public getAllTopItems(options?: AxiosRequestConfig) {
        return TopsApiFp(this.configuration).getAllTopItems(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Top Item by Id
     * @param {number} id ID of the Top Item
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TopsApi
     */
    public getTopItemById(id: number, options?: AxiosRequestConfig) {
        return TopsApiFp(this.configuration).getTopItemById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Top Item by Id
     * @param {number} id ID of the Top Item
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TopsApi
     */
    public updateTopItemById(id: number, options?: AxiosRequestConfig) {
        return TopsApiFp(this.configuration).updateTopItemById(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * WristsApi - axios parameter creator
 * @export
 */
export const WristsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Wrist Item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWristItem: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/wrists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete All Wrist Items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAllWristItems: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/wrists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Wrist Item by Id
         * @param {number} id ID of the Wrist Item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWristById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteWristById', 'id', id)
            const localVarPath = `/wrists/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get All Wrist Items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllWristItems: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/wrists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Wrist Item by Id
         * @param {number} id ID of the Wrist Item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWristItemById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getWristItemById', 'id', id)
            const localVarPath = `/wrists/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Wrist Item by Id
         * @param {number} id ID of the Wrist Item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTopWristById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateTopWristById', 'id', id)
            const localVarPath = `/wrists/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WristsApi - functional programming interface
 * @export
 */
export const WristsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WristsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Wrist Item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createWristItem(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatalessResponse & object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createWristItem(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete All Wrist Items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAllWristItems(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatalessResponse & Array<object>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAllWristItems(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Wrist Item by Id
         * @param {number} id ID of the Wrist Item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWristById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatalessResponse & object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteWristById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get All Wrist Items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllWristItems(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatalessResponse & Array<object>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllWristItems(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Wrist Item by Id
         * @param {number} id ID of the Wrist Item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWristItemById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatalessResponse & object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWristItemById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Wrist Item by Id
         * @param {number} id ID of the Wrist Item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTopWristById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatalessResponse & object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTopWristById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WristsApi - factory interface
 * @export
 */
export const WristsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WristsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Wrist Item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWristItem(options?: any): AxiosPromise<DatalessResponse & object> {
            return localVarFp.createWristItem(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete All Wrist Items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAllWristItems(options?: any): AxiosPromise<DatalessResponse & Array<object>> {
            return localVarFp.deleteAllWristItems(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Wrist Item by Id
         * @param {number} id ID of the Wrist Item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWristById(id: number, options?: any): AxiosPromise<DatalessResponse & object> {
            return localVarFp.deleteWristById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get All Wrist Items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllWristItems(options?: any): AxiosPromise<DatalessResponse & Array<object>> {
            return localVarFp.getAllWristItems(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Wrist Item by Id
         * @param {number} id ID of the Wrist Item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWristItemById(id: number, options?: any): AxiosPromise<DatalessResponse & object> {
            return localVarFp.getWristItemById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Wrist Item by Id
         * @param {number} id ID of the Wrist Item
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTopWristById(id: number, options?: any): AxiosPromise<DatalessResponse & object> {
            return localVarFp.updateTopWristById(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WristsApi - object-oriented interface
 * @export
 * @class WristsApi
 * @extends {BaseAPI}
 */
export class WristsApi extends BaseAPI {
    /**
     * 
     * @summary Create Wrist Item
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WristsApi
     */
    public createWristItem(options?: AxiosRequestConfig) {
        return WristsApiFp(this.configuration).createWristItem(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete All Wrist Items
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WristsApi
     */
    public deleteAllWristItems(options?: AxiosRequestConfig) {
        return WristsApiFp(this.configuration).deleteAllWristItems(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Wrist Item by Id
     * @param {number} id ID of the Wrist Item
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WristsApi
     */
    public deleteWristById(id: number, options?: AxiosRequestConfig) {
        return WristsApiFp(this.configuration).deleteWristById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get All Wrist Items
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WristsApi
     */
    public getAllWristItems(options?: AxiosRequestConfig) {
        return WristsApiFp(this.configuration).getAllWristItems(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Wrist Item by Id
     * @param {number} id ID of the Wrist Item
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WristsApi
     */
    public getWristItemById(id: number, options?: AxiosRequestConfig) {
        return WristsApiFp(this.configuration).getWristItemById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Wrist Item by Id
     * @param {number} id ID of the Wrist Item
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WristsApi
     */
    public updateTopWristById(id: number, options?: AxiosRequestConfig) {
        return WristsApiFp(this.configuration).updateTopWristById(id, options).then((request) => request(this.axios, this.basePath));
    }
}


